package com.hanul.clcd;

import java.util.HashMap;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import common.CommonService;
import member.MemberServiceImpl;
import member.MemberVO;
import notice.NoticeServiceImpl;
import notice.NoticeVO;

@Controller
public class NoticeController {

	@Autowired private NoticeServiceImpl service;
	
	// 회원정보를 처리하기 위한 service 필요 (MemberServiceImpl)
	@Autowired private MemberServiceImpl member;
	
	@Autowired private CommonService common;
	
	// 공지사항 상세화면 요청
	
	@RequestMapping ("/detail.no")
	public String detail(int id) {
		// 상세화면 요청 전 ....
		
		// 선택한 공지사항 정보를 DB에서 조회해와 상세화면에 출력
		service.notice_detail(id);
		return "";
	}
	
	
	
	// 신규 공지사항 게시글 저장처리 요청
	@RequestMapping ("/insert.no")
	public String insert(NoticeVO vo, MultipartFile file, HttpSession session) {
		
		// 로그인된 사용자의 id를 가져와 글쓴이(writer)에 담기 위한 처리
//		MemberVO member = (MemberVO) session.getAttribute("loginInfo");
//		vo.setWriter(member.getId());
		
 		vo.setWriter( ((MemberVO) session.getAttribute("loginInfo")).getId() );
 		
 		// 파일이 있는 경우
 		if ( ! file.isEmpty() ) {
 			// 파일 첨부 처리(filename, filepath)
 			vo.setFilename( file.getOriginalFilename()); // 전달받은 파일의 실제 이름을 vo에 할당
 			vo.setFilepath(common.fileUpload("notice", file, session));	//
 		}
		
		// 화면에서 입력한 정보를 DB에 저장한 후 화면으로 연결
		service.notice_insert(vo);
		return "redirect:list.no";	// 리턴시 공지사항 목록 조회 화면으로 이동 처리
	}
	
	
	// 신규 공지사항 입력(글쓰기) 화면 요청
	@RequestMapping ("/new.no")
	public String notice() {
		return "notice/new";
	}
	
	
	
	@RequestMapping ("/list.no")
	public String list(HttpSession session, Model model) {
		
		// 공지글 처리 중 임의로 로그인해 두기 (admin) - 나중에 삭제할 것
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("id", "admin");
		map.put("pw", "admin");
		
		session.setAttribute("loginInfo", member.member_login(map));
		
		
		session.setAttribute("category", "no");
		// DB에서 공지글 목록을 조회해와 목록화면에 출력
		model.addAttribute("list", service.notice_list()) ;
		
		return "notice/list";
	}
	
	
}
