<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.mapper">

<!-- 댓글 목록 조회  -->
<select id="comment_list" resultType="board.BoardCommentVO">
	select c.*, ( select name from member where id = c.writer ) name 
	from board_comment c
	where pid = #{pid}
	order by id desc
</select>

<!-- 댓글 저장 처리 -->
<insert id="comment_insert">
	insert into board_comment (content, writer, pid)
	values (#{content}, #{writer}, #{pid})
</insert>


<!-- id에 해당하는 방명록 글 수정 저장 처리 -->
<update id="update">
	update board set title=#{title}, content=#{content}
				, filename = #{filename, jdbcType=VARCHAR}
				, filepath = #{filepath, jdbcType=VARCHAR}
	where id = #{id}			
</update>

<!-- id에 해당하는 방명록 글 삭제 처리 -->
<delete id="delete">
	delete from board
	where id = #{id}
</delete>

<!-- 해당 방명록 글의 조회수 증가 -->
<update id="read">
	update board set readcnt = readcnt+1
	where id = #{id}
</update>

<!-- 해당 방명록 글의 상세 정보 조회 -->
<select id="detail" resultType="board.BoardVO">
<!-- 	select b.*, (select name from member where id = b.writer) name -->
<!-- 	from board b -->
<!-- 	where id = #{id} -->
	select b.*, (select name from member where id = b.writer) name
	from
	 (select board.*,
		lag(id, 1, 0) over (order by id desc) as prev,
		lag(title, 1, '이전글 없음') over (order by id desc) as prev_title,
		lead(id, 1, 0) over (order by id desc) as next,
		lead(title, 1, '다음글 없음') over (order by id desc) as next_title
	  from board
	  order by id desc) b
	where id = #{id}
<!-- 쿼리문 분석 함수 중 LAG (이전 로우의 값 반환)
						 LEAD (이후 로우의 값 반환)
형식) LAG(expr, offset, default) over (order by 절)
의미) LAG 함수는 계산 대상 데이터(로우)들을 order by 절로 정렬하여
      expr 에 명시된 값을 기준으로 이전 로우의 값을 반환함.
      offset(생략 가능) default 1
 -->	
</select>

<!-- 방명록 신규 글 저장 -->
<insert id="insert">
	insert into board(title, content, writer, filename, filepath)
	values (#{title}, #{content}, #{writer},
			#{filename, jdbcType=VARCHAR} , #{filepath, jdbcType=VARCHAR} )
</insert>

<sql id='where_search'>
	<if test="search == 'title' or search == 'content' ">
		where ${search} like '%'||#{keyword}||'%'
	</if>
	<if test="search=='writer'">
		where <include refid="search_writer" />
	</if>
	<if test="search == 'all' ">
		where title like '%'||#{keyword}||'%'
		or content like '%'||#{keyword}||'%'
		or <include refid="search_writer" /> 
	</if>
	
</sql>
<sql id='search_writer'>
	writer in ( select id from member where name like '%'||#{keyword}||'%' )		
</sql>



<!-- 전체 게시글 수 조회 -->
<select id="totalList" resultType="integer">
	select count(*) from board <include refid="where_search" />
</select>


<!-- 페이징 처리 전체 게시글 조회 -->
<select id="list" resultType="board.BoardVO">
	select * 
	from (select rownum no, b.*, ( select name from member where id = b.writer) name
			from ( select * from board <include refid="where_search" />
					order by id) b
			order by no desc)
	where no between #{beginList} and #{endList}			
</select>  
</mapper>